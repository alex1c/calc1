/**
 * –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–º–∏–ª–ª–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–µ–¥–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ñ–æ—Ä–º—É–ª–µ –í–∏–¥–º–∞—Ä–∫–∞
 */

export interface AlcoholInput {
	gender: 'male' | 'female';
	weight: number; // –≤ –∫–≥
	volume: number; // –≤ –º–ª
	strength: number; // –≤ %
	startTime?: Date; // –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
}

export interface AlcoholResult {
	bac: number; // –ø—Ä–æ–º–∏–ª–ª–µ
	eliminationTime: number; // –≤—Ä–µ–º—è –≤—ã–≤–µ–¥–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
	state: string; // —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	stateLevel: number; // —É—Ä–æ–≤–µ–Ω—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (0-6)
	isSafeToDrive: boolean; // –º–æ–∂–Ω–æ –ª–∏ –≤–æ–¥–∏—Ç—å
	warning: string; // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
}

export interface BACState {
	min: number;
	max: number;
	level: number;
	ru: string;
	en: string;
	de: string;
	es: string;
	color: string;
	description: string;
}

// –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π BAC
export const BAC_STATES: BACState[] = [
	{
		min: 0.0,
		max: 0.3,
		level: 0,
		ru: '–¢—Ä–µ–∑–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
		en: 'Sober',
		de: 'N√ºchtern',
		es: 'Sobrio',
		color: 'green',
		description: '–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏',
	},
	{
		min: 0.3,
		max: 0.5,
		level: 1,
		ru: '–õ—ë–≥–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ',
		en: 'Slight relaxation',
		de: 'Leichte Entspannung',
		es: 'Ligera relajaci√≥n',
		color: 'light-green',
		description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∞–ª–∫–æ–≥–æ–ª—è',
	},
	{
		min: 0.5,
		max: 1.0,
		level: 2,
		ru: '–õ—ë–≥–∫–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ',
		en: 'Mild intoxication',
		de: 'Leichte Trunkenheit',
		es: 'Embriaguez leve',
		color: 'yellow',
		description: '–ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è',
	},
	{
		min: 1.0,
		max: 2.0,
		level: 3,
		ru: '–°—Ä–µ–¥–Ω–µ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ',
		en: 'Moderate intoxication',
		de: 'Mittlere Trunkenheit',
		es: 'Embriaguez moderada',
		color: 'orange',
		description: '–ó–∞–º–µ—Ç–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏',
	},
	{
		min: 2.0,
		max: 3.0,
		level: 4,
		ru: '–°–∏–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ',
		en: 'Severe intoxication',
		de: 'Starke Trunkenheit',
		es: 'Embriaguez severa',
		color: 'red',
		description: '–°–µ—Ä—å—ë–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
	},
	{
		min: 3.0,
		max: 4.0,
		level: 5,
		ru: '–¢—è–∂—ë–ª–æ–µ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª–µ–º',
		en: 'Alcohol poisoning',
		de: 'Alkoholvergiftung',
		es: 'Intoxicaci√≥n grave',
		color: 'dark-red',
		description: '–û–ø–∞—Å–Ω–æ–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
	},
	{
		min: 4.0,
		max: Infinity,
		level: 6,
		ru: '–û–ø–∞—Å–Ω–æ–µ –¥–ª—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
		en: 'Life-threatening condition',
		de: 'Lebensgef√§hrlicher Zustand',
		es: 'Condici√≥n peligrosa',
		color: 'purple',
		description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
	},
];

/**
 * –†–∞—Å—á—ë—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –í–∏–¥–º–∞—Ä–∫–∞
 */
export function calculateBAC(input: AlcoholInput): number {
	const { gender, weight, volume, strength, startTime } = input;

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Ä—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
	const alcoholGrams = ((volume * strength) / 100) * 0.789;

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–º—É–∂—á–∏–Ω—ã: 0.7, –∂–µ–Ω—â–∏–Ω—ã: 0.6)
	const distributionRatio = gender === 'male' ? 0.7 : 0.6;

	// –ú–∞—Å—Å–∞ —Ç–µ–ª–∞ –≤ –≥—Ä–∞–º–º–∞—Ö
	const weightGrams = weight * 1000;

	// –§–æ—Ä–º—É–ª–∞ –í–∏–¥–º–∞—Ä–∫–∞: BAC = (A / (r √ó W)) √ó 1000
	const initialBAC =
		(alcoholGrams / (distributionRatio * weightGrams)) * 1000;

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –º–æ–º–µ–Ω—Ç–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
	const now = new Date();
	const timeElapsed =
		(now.getTime() - startTime.getTime()) / (1000 * 60 * 60); // –≤ —á–∞—Å–∞—Ö

	// –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è: 0.15‚Ä∞ –≤ —á–∞—Å
	const eliminationRate = 0.15;
	const eliminatedBAC = timeElapsed * eliminationRate;

	// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å BAC —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
	const currentBAC = initialBAC - eliminatedBAC;

	return Math.max(0, currentBAC); // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
}

/**
 * –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–µ–¥–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è
 * –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∏—è: 0.15‚Ä∞ –≤ —á–∞—Å
 */
export function calculateEliminationTime(bac: number): number {
	return bac / 0.15; // —á–∞—Å—ã
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é BAC
 */
export function getBACState(bac: number, locale: string = 'ru'): BACState {
	const state =
		BAC_STATES.find((s) => bac >= s.min && bac < s.max) ||
		BAC_STATES[BAC_STATES.length - 1];
	return state;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function getStateName(state: BACState, locale: string = 'ru'): string {
	switch (locale) {
		case 'en':
			return state.en;
		case 'de':
			return state.de;
		case 'es':
			return state.es;
		default:
			return state.ru;
	}
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
export function getStateColor(state: BACState): string {
	return state.color;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
 * –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω –ª–∏–º–∏—Ç 0.5‚Ä∞, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö 0.0‚Ä∞
 */
export function isSafeToDrive(bac: number, limit: number = 0.5): boolean {
	return bac <= limit;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
 */
export function getWarning(bac: number, locale: string = 'ru'): string {
	const state = getBACState(bac, locale);

	if (state.level >= 5) {
		return '‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â—å—é!';
	}

	if (state.level >= 3) {
		return 'üö´ –ù–ï –°–ê–î–ò–¢–ï–°–¨ –ó–ê –†–£–õ–¨! –£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç.';
	}

	if (state.level >= 1) {
		return '‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –ê–ª–∫–æ–≥–æ–ª—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.';
	}

	return '‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–ª–∫–æ–≥–æ–ª—è –≤ –Ω–æ—Ä–º–µ.';
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞
 */
export function calculateAlcohol(
	input: AlcoholInput,
	locale: string = 'ru'
): AlcoholResult {
	const bac = calculateBAC(input);
	const eliminationTime = calculateEliminationTime(bac);
	const state = getBACState(bac, locale);
	const stateName = getStateName(state, locale);
	const safeToDrive = isSafeToDrive(bac);
	const warning = getWarning(bac, locale);

	return {
		bac: Math.round(bac * 1000) / 1000, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤
		eliminationTime: Math.round(eliminationTime * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
		state: stateName,
		stateLevel: state.level,
		isSafeToDrive: safeToDrive,
		warning,
	};
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
export function formatTime(hours: number, locale: string = 'ru'): string {
	const wholeHours = Math.floor(hours);
	const minutes = Math.round((hours - wholeHours) * 60);

	if (locale === 'ru') {
		if (wholeHours === 0) {
			return `${minutes} –º–∏–Ω`;
		}
		if (minutes === 0) {
			return `${wholeHours} —á`;
		}
		return `${wholeHours} —á ${minutes} –º–∏–Ω`;
	}

	if (locale === 'en') {
		if (wholeHours === 0) {
			return `${minutes} min`;
		}
		if (minutes === 0) {
			return `${wholeHours} h`;
		}
		return `${wholeHours} h ${minutes} min`;
	}

	if (locale === 'de') {
		if (wholeHours === 0) {
			return `${minutes} Min`;
		}
		if (minutes === 0) {
			return `${wholeHours} Std`;
		}
		return `${wholeHours} Std ${minutes} Min`;
	}

	if (locale === 'es') {
		if (wholeHours === 0) {
			return `${minutes} min`;
		}
		if (minutes === 0) {
			return `${wholeHours} h`;
		}
		return `${wholeHours} h ${minutes} min`;
	}

	return `${wholeHours}h ${minutes}m`;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function validateAlcoholInput(input: AlcoholInput): {
	isValid: boolean;
	errors: string[];
} {
	const errors: string[] = [];

	if (!input.gender) {
		errors.push('–ü–æ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
	}

	if (!input.weight || input.weight <= 0) {
		errors.push('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
	}

	if (input.weight > 300) {
		errors.push('–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 –∫–≥');
	}

	if (!input.volume || input.volume <= 0) {
		errors.push('–û–±—ä—ë–º –Ω–∞–ø–∏—Ç–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
	}

	if (input.volume > 10000) {
		errors.push('–û–±—ä—ë–º –Ω–∞–ø–∏—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ª–∏—Ç—Ä–æ–≤');
	}

	if (!input.strength || input.strength < 0) {
		errors.push('–ö—Ä–µ–ø–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π');
	}

	if (input.strength > 100) {
		errors.push('–ö—Ä–µ–ø–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%');
	}

	return {
		isValid: errors.length === 0,
		errors,
	};
}
