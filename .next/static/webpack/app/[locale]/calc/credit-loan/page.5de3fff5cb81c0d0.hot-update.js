"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/calc/credit-loan/page",{

/***/ "(app-pages-browser)/./src/lib/calculators/loan.ts":
/*!*************************************!*\
  !*** ./src/lib/calculators/loan.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAnnuityLoan: function() { return /* binding */ calculateAnnuityLoan; },\n/* harmony export */   calculateDifferentiatedLoan: function() { return /* binding */ calculateDifferentiatedLoan; },\n/* harmony export */   calculateLoan: function() { return /* binding */ calculateLoan; },\n/* harmony export */   exportPaymentScheduleToCSV: function() { return /* binding */ exportPaymentScheduleToCSV; },\n/* harmony export */   generatePaymentSchedule: function() { return /* binding */ generatePaymentSchedule; },\n/* harmony export */   validateLoanInput: function() { return /* binding */ validateLoanInput; }\n/* harmony export */ });\n/**\r\n * Loan calculation library for credit calculators\r\n * Supports both annuity and differentiated payment methods\r\n */ /**\r\n * Calculate annuity loan payments (fixed monthly payment)\r\n */ function calculateAnnuityLoan(input) {\n    const { loanAmount, termMonths, interestRate, additionalPayment = 0 } = input;\n    const monthlyRate = interestRate / 100 / 12;\n    const effectiveLoanAmount = loanAmount - (input.downPayment || 0);\n    // Calculate base monthly payment\n    const baseMonthlyPayment = monthlyRate === 0 ? effectiveLoanAmount / termMonths : effectiveLoanAmount * monthlyRate * Math.pow(1 + monthlyRate, termMonths) / (Math.pow(1 + monthlyRate, termMonths) - 1);\n    const totalMonthlyPayment = baseMonthlyPayment + additionalPayment;\n    // Calculate payment schedule\n    const schedule = [];\n    let balance = effectiveLoanAmount;\n    let totalPayments = 0;\n    let totalInterest = 0;\n    let effectiveTerm = 0;\n    for(let month = 1; month <= termMonths; month++){\n        const interestPayment = balance * monthlyRate;\n        const principalPayment = Math.min(totalMonthlyPayment - interestPayment, balance);\n        const actualPayment = principalPayment + interestPayment;\n        balance -= principalPayment;\n        totalPayments += actualPayment;\n        totalInterest += interestPayment;\n        effectiveTerm = month;\n        schedule.push({\n            month,\n            payment: actualPayment,\n            interest: interestPayment,\n            principal: principalPayment,\n            balance: Math.max(0, balance)\n        });\n        // If balance is paid off early due to additional payments\n        if (balance <= 0.01) {\n            break;\n        }\n    }\n    return {\n        monthlyPayment: totalMonthlyPayment,\n        totalPayments,\n        totalInterest,\n        effectiveTerm,\n        paymentSchedule: schedule\n    };\n}\n/**\r\n * Calculate differentiated loan payments (decreasing monthly payment)\r\n */ function calculateDifferentiatedLoan(input) {\n    var _schedule_;\n    const { loanAmount, termMonths, interestRate, additionalPayment = 0 } = input;\n    const monthlyRate = interestRate / 100 / 12;\n    const effectiveLoanAmount = loanAmount - (input.downPayment || 0);\n    const basePrincipalPayment = effectiveLoanAmount / termMonths;\n    // Calculate payment schedule\n    const schedule = [];\n    let balance = effectiveLoanAmount;\n    let totalPayments = 0;\n    let totalInterest = 0;\n    let effectiveTerm = 0;\n    for(let month = 1; month <= termMonths; month++){\n        const interestPayment = balance * monthlyRate;\n        const principalPayment = Math.min(basePrincipalPayment, balance);\n        const additionalPrincipal = Math.min(additionalPayment, balance - principalPayment);\n        const totalPrincipalPayment = principalPayment + additionalPrincipal;\n        const totalPayment = totalPrincipalPayment + interestPayment;\n        balance -= totalPrincipalPayment;\n        totalPayments += totalPayment;\n        totalInterest += interestPayment;\n        effectiveTerm = month;\n        schedule.push({\n            month,\n            payment: totalPayment,\n            interest: interestPayment,\n            principal: totalPrincipalPayment,\n            balance: Math.max(0, balance)\n        });\n        // If balance is paid off early due to additional payments\n        if (balance <= 0.01) {\n            break;\n        }\n    }\n    // First payment is the highest for differentiated loans\n    const firstPayment = ((_schedule_ = schedule[0]) === null || _schedule_ === void 0 ? void 0 : _schedule_.payment) || 0;\n    return {\n        monthlyPayment: firstPayment,\n        totalPayments,\n        totalInterest,\n        effectiveTerm,\n        paymentSchedule: schedule\n    };\n}\n/**\r\n * Generate payment schedule for both loan types\r\n */ function generatePaymentSchedule(input) {\n    if (input.paymentType === \"annuity\") {\n        return calculateAnnuityLoan(input).paymentSchedule;\n    } else {\n        return calculateDifferentiatedLoan(input).paymentSchedule;\n    }\n}\n/**\r\n * Calculate loan with specified payment type\r\n */ function calculateLoan(input) {\n    if (input.paymentType === \"annuity\") {\n        return calculateAnnuityLoan(input);\n    } else {\n        return calculateDifferentiatedLoan(input);\n    }\n}\n/**\r\n * Export payment schedule as CSV\r\n */ function exportPaymentScheduleToCSV(schedule) {\n    const headers = [\n        \"Month\",\n        \"Payment\",\n        \"Interest\",\n        \"Principal\",\n        \"Balance\"\n    ];\n    const rows = schedule.map((item)=>[\n            item.month,\n            item.payment.toFixed(2),\n            item.interest.toFixed(2),\n            item.principal.toFixed(2),\n            item.balance.toFixed(2)\n        ]);\n    return [\n        headers,\n        ...rows\n    ].map((row)=>row.join(\",\")).join(\"\\n\");\n}\n/**\r\n * Validate loan input parameters\r\n */ function validateLoanInput(input) {\n    const errors = [];\n    if (!input.loanAmount || input.loanAmount <= 0) {\n        errors.push(\"Loan amount must be greater than 0\");\n    }\n    // Calculate total term in months from years and months\n    const totalTermMonths = (input.termYears || 0) * 12 + (input.termMonths || 0);\n    if (totalTermMonths < 1 || totalTermMonths > 360) {\n        errors.push(\"Loan term must be between 1 month and 30 years\");\n    }\n    if (input.interestRate === undefined || input.interestRate < 0 || input.interestRate > 100) {\n        errors.push(\"Interest rate must be between 0% and 100%\");\n    }\n    if (input.downPayment && input.downPayment < 0) {\n        errors.push(\"Down payment cannot be negative\");\n    }\n    if (input.downPayment && input.downPayment >= input.loanAmount) {\n        errors.push(\"Down payment cannot be greater than or equal to loan amount\");\n    }\n    if (input.additionalPayment && input.additionalPayment < 0) {\n        errors.push(\"Additional payment cannot be negative\");\n    }\n    return errors;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/calculators/loan.ts\n"));

/***/ })

});