"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/calc/savings/page",{

/***/ "(app-pages-browser)/./src/lib/calculators/savings.ts":
/*!****************************************!*\
  !*** ./src/lib/calculators/savings.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateCompoundSavings: function() { return /* binding */ calculateCompoundSavings; },\n/* harmony export */   calculateNoInterestSavings: function() { return /* binding */ calculateNoInterestSavings; },\n/* harmony export */   calculateSavings: function() { return /* binding */ calculateSavings; },\n/* harmony export */   calculateSimpleSavings: function() { return /* binding */ calculateSimpleSavings; },\n/* harmony export */   exportSavingsScheduleToCSV: function() { return /* binding */ exportSavingsScheduleToCSV; },\n/* harmony export */   formatSavingsCurrency: function() { return /* binding */ formatSavingsCurrency; },\n/* harmony export */   generateSavingsSchedule: function() { return /* binding */ generateSavingsSchedule; },\n/* harmony export */   validateSavingsInput: function() { return /* binding */ validateSavingsInput; }\n/* harmony export */ });\n/**\r\n * Savings calculation library\r\n * Handles various types of savings calculations including simple and compound interest\r\n */ /**\r\n * Calculate savings with compound interest\r\n */ function calculateCompoundSavings(input) {\n    var _schedule_find;\n    const { targetAmount, initialAmount, termMonths, monthlyContribution = 0, interestRate } = input;\n    const monthlyRate = interestRate / 12 / 100;\n    const schedule = [];\n    let currentAmount = initialAmount;\n    let totalContributions = initialAmount;\n    let totalInterest = 0;\n    // If target amount is specified, calculate required monthly contribution\n    let actualMonthlyContribution = monthlyContribution;\n    if (targetAmount && !monthlyContribution) {\n        // Calculate required monthly contribution to reach target\n        if (interestRate === 0) {\n            actualMonthlyContribution = (targetAmount - initialAmount) / termMonths;\n        } else {\n            // Use future value of annuity formula to solve for payment\n            const futureValueFactor = Math.pow(1 + monthlyRate, termMonths);\n            actualMonthlyContribution = (targetAmount - initialAmount * futureValueFactor) / ((futureValueFactor - 1) / monthlyRate);\n        }\n    }\n    for(let month = 1; month <= termMonths; month++){\n        var _schedule_find1;\n        const startAmount = currentAmount;\n        const contribution = actualMonthlyContribution;\n        const interest = currentAmount * monthlyRate;\n        const endAmount = startAmount + contribution + interest;\n        schedule.push({\n            month,\n            startAmount: Math.round(startAmount * 100) / 100,\n            contribution,\n            interest: Math.round(interest * 100) / 100,\n            endAmount: Math.round(endAmount * 100) / 100\n        });\n        currentAmount = endAmount;\n        totalContributions += contribution;\n        totalInterest += interest;\n        // Check if target is achieved\n        if (targetAmount && currentAmount >= targetAmount && !((_schedule_find1 = schedule.find((s)=>s.month === month)) === null || _schedule_find1 === void 0 ? void 0 : _schedule_find1.achievementMonth)) {\n            schedule[schedule.length - 1].achievementMonth = month;\n        }\n    }\n    const achievementMonth = targetAmount && currentAmount >= targetAmount ? (_schedule_find = schedule.find((s)=>s.endAmount >= targetAmount)) === null || _schedule_find === void 0 ? void 0 : _schedule_find.month : undefined;\n    return {\n        finalAmount: Math.round(currentAmount * 100) / 100,\n        totalContributions: Math.round(totalContributions * 100) / 100,\n        totalInterest: Math.round(totalInterest * 100) / 100,\n        monthlyContribution: Math.round(actualMonthlyContribution * 100) / 100,\n        achievable: !targetAmount || currentAmount >= targetAmount,\n        achievementMonth,\n        savingsSchedule: schedule\n    };\n}\n/**\r\n * Calculate savings without interest\r\n */ function calculateNoInterestSavings(input) {\n    const { targetAmount, initialAmount, termMonths, monthlyContribution = 0 } = input;\n    const schedule = [];\n    let currentAmount = initialAmount;\n    let totalContributions = initialAmount;\n    let totalInterest = 0;\n    // If target amount is specified, calculate required monthly contribution\n    let actualMonthlyContribution = monthlyContribution;\n    if (targetAmount && !monthlyContribution) {\n        // For no interest: target = initial + (monthly * months)\n        actualMonthlyContribution = (targetAmount - initialAmount) / termMonths;\n    }\n    for(let month = 1; month <= termMonths; month++){\n        const startAmount = currentAmount;\n        const contribution = actualMonthlyContribution;\n        const interest = 0; // No interest\n        const endAmount = startAmount + contribution + interest;\n        schedule.push({\n            month,\n            startAmount: Math.round(startAmount * 100) / 100,\n            contribution,\n            interest: Math.round(interest * 100) / 100,\n            endAmount: Math.round(endAmount * 100) / 100\n        });\n        currentAmount = endAmount;\n        totalContributions += contribution;\n        totalInterest += interest;\n    }\n    return {\n        finalAmount: Math.round(currentAmount * 100) / 100,\n        totalContributions: Math.round(totalContributions * 100) / 100,\n        totalInterest: Math.round(totalInterest * 100) / 100,\n        monthlyContribution: Math.round(actualMonthlyContribution * 100) / 100,\n        achievable: !targetAmount || currentAmount >= targetAmount,\n        achievementMonth: undefined,\n        savingsSchedule: schedule\n    };\n}\n/**\r\n * Calculate savings with simple interest\r\n */ function calculateSimpleSavings(input) {\n    const { targetAmount, initialAmount, termMonths, monthlyContribution = 0, interestRate } = input;\n    const monthlyRate = interestRate / 12 / 100;\n    const schedule = [];\n    let currentAmount = initialAmount;\n    let totalContributions = initialAmount;\n    let totalInterest = 0;\n    // If target amount is specified, calculate required monthly contribution\n    let actualMonthlyContribution = monthlyContribution;\n    if (targetAmount && !monthlyContribution) {\n        // For simple interest: target = initial + (monthly * months) + (initial * rate * months / 12)\n        actualMonthlyContribution = (targetAmount - initialAmount * (1 + interestRate * termMonths / 12 / 100)) / termMonths;\n    }\n    for(let month = 1; month <= termMonths; month++){\n        const startAmount = currentAmount;\n        const contribution = actualMonthlyContribution;\n        const interest = initialAmount * monthlyRate; // Simple interest on initial amount only\n        const endAmount = startAmount + contribution + interest;\n        schedule.push({\n            month,\n            startAmount: Math.round(startAmount * 100) / 100,\n            contribution,\n            interest: Math.round(interest * 100) / 100,\n            endAmount: Math.round(endAmount * 100) / 100\n        });\n        currentAmount = endAmount;\n        totalContributions += contribution;\n        totalInterest += interest;\n    }\n    return {\n        finalAmount: Math.round(currentAmount * 100) / 100,\n        totalContributions: Math.round(totalContributions * 100) / 100,\n        totalInterest: Math.round(totalInterest * 100) / 100,\n        monthlyContribution: Math.round(actualMonthlyContribution * 100) / 100,\n        achievable: !targetAmount || currentAmount >= targetAmount,\n        achievementMonth: undefined,\n        savingsSchedule: schedule\n    };\n}\n/**\r\n * Main calculation function that routes to appropriate calculation method\r\n */ function calculateSavings(input) {\n    switch(input.interestType){\n        case \"none\":\n            return calculateNoInterestSavings(input);\n        case \"simple\":\n            return calculateSimpleSavings(input);\n        case \"compound\":\n            return calculateCompoundSavings(input);\n        default:\n            throw new Error(\"Invalid interest type\");\n    }\n}\n/**\r\n * Generate savings schedule for display\r\n */ function generateSavingsSchedule(input) {\n    const result = calculateSavings(input);\n    return result.savingsSchedule;\n}\n/**\r\n * Export savings schedule to CSV format\r\n */ function exportSavingsScheduleToCSV(schedule) {\n    const headers = [\n        \"Month\",\n        \"Start Amount\",\n        \"Contribution\",\n        \"Interest\",\n        \"End Amount\"\n    ];\n    const rows = schedule.map((item)=>[\n            item.month.toString(),\n            item.startAmount.toFixed(2),\n            item.contribution.toFixed(2),\n            item.interest.toFixed(2),\n            item.endAmount.toFixed(2)\n        ]);\n    return [\n        headers.join(\",\"),\n        ...rows.map((row)=>row.join(\",\"))\n    ].join(\"\\n\");\n}\n/**\r\n * Validate savings input parameters\r\n */ function validateSavingsInput(input) {\n    const errors = [];\n    if (input.targetAmount && input.targetAmount <= 0) {\n        errors.push(\"Target amount must be greater than 0\");\n    }\n    if (!input.initialAmount || input.initialAmount < 0) {\n        errors.push(\"Initial amount must be 0 or greater\");\n    }\n    if (!input.termMonths || input.termMonths <= 0) {\n        errors.push(\"Term must be greater than 0\");\n    }\n    if (input.termMonths && input.termMonths > 600) {\n        errors.push(\"Term cannot exceed 50 years (600 months)\");\n    }\n    if (input.monthlyContribution && input.monthlyContribution < 0) {\n        errors.push(\"Monthly contribution cannot be negative\");\n    }\n    if (!input.interestRate || input.interestRate < 0) {\n        errors.push(\"Interest rate must be 0 or greater\");\n    }\n    if (input.interestRate && input.interestRate > 100) {\n        errors.push(\"Interest rate cannot exceed 100%\");\n    }\n    // Check if either target amount or monthly contribution is provided\n    if (!input.targetAmount && !input.monthlyContribution) {\n        errors.push(\"Either target amount or monthly contribution must be specified\");\n    }\n    return errors;\n}\n/**\r\n * Format currency for display\r\n */ function formatSavingsCurrency(amount) {\n    return new Intl.NumberFormat(\"ru-RU\", {\n        style: \"currency\",\n        currency: \"RUB\",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n    }).format(amount);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/calculators/savings.ts\n"));

/***/ })

});