const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
function fixFileStructure(filePath) {
  console.log(`–ò—Å–ø—Ä–∞–≤–ª—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞: ${filePath}`);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    
    let inCalculatorsSection = false;
    let calculatorsEndLine = -1;
    const fixedLines = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ calculators
      if (line.trim() === '"calculators": {') {
        inCalculatorsSection = true;
        fixedLines.push(line);
        continue;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ calculators (—Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º 2 –ø—Ä–æ–±–µ–ª–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞)
      if (inCalculatorsSection && line.match(/^  }$/)) {
        calculatorsEndLine = i;
        inCalculatorsSection = false;
        fixedLines.push(line);
        continue;
      }
      
      // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ calculators, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
      if (inCalculatorsSection) {
        fixedLines.push(line);
        continue;
      }
      
      // –ï—Å–ª–∏ –º—ã –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏ calculators –∏ –≤–∏–¥–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ—Ä–Ω—è
      if (calculatorsEndLine > -1 && line.match(/^  "[a-z-]+": {$/)) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å 2 –¥–æ 4 –ø—Ä–æ–±–µ–ª–æ–≤
        const fixedLine = '    ' + line.substring(2);
        fixedLines.push(fixedLine);
        continue;
      }
      
      // –ï—Å–ª–∏ –º—ã –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏ calculators –∏ –≤–∏–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º 2 –ø—Ä–æ–±–µ–ª–∞
      if (calculatorsEndLine > -1 && line.match(/^  [^}]/)) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å 2 –¥–æ 4 –ø—Ä–æ–±–µ–ª–æ–≤
        const fixedLine = '    ' + line.substring(2);
        fixedLines.push(fixedLine);
        continue;
      }
      
      // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      fixedLines.push(line);
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(filePath, fixedLines.join('\n'), 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${filePath} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
const filesToFix = [
  'messages/es.json',
  'messages/de.json'
];

filesToFix.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    fixFileStructure(filePath);
  } else {
    console.log(`‚ö†Ô∏è –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
