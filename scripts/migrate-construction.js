const fs = require('fs');
const path = require('path');

const monolithPath = path.join(__dirname, '..', 'messages', 'ru.json');
const constructionPath = path.join(__dirname, '..', 'messages', 'ru', 'calculators', 'construction.json');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –∏–∑ page.tsx
// –í –º–æ–Ω–æ–ª–∏—Ç–µ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ—Ö, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ page.tsx
const constructionCalcs = [
	{ monolithKey: 'wallpaper', targetKey: 'wallpaper' },
	{ monolithKey: 'paint', targetKey: 'paint' },
	{ monolithKey: 'tileGlue', targetKey: 'tileGlue' },
	{ monolithKey: 'putty', targetKey: 'putty' },
	{ monolithKey: 'primer', targetKey: 'primer' },
	{ monolithKey: 'plaster', targetKey: 'plaster' },
	{ monolithKey: 'foundation', targetKey: 'foundation' },
	{ monolithKey: 'wallArea', targetKey: 'wallArea' },
	{ monolithKey: 'ventilation', targetKey: 'ventilation' },
	{ monolithKey: 'tile', targetKey: 'tile' },
	{ monolithKey: 'laminate', targetKey: 'laminate' },
	{ monolithKey: 'concrete', targetKey: 'concrete' },
	{ monolithKey: 'roof', targetKey: 'roof' },
	{ monolithKey: 'wall', targetKey: 'wall' },
	{ monolithKey: 'floorHeating', targetKey: 'floorHeating' },
	{ monolithKey: 'rebarCalculator', targetKey: 'rebarCalculator' },
	{ monolithKey: 'cableSectionCalculator', targetKey: 'cableSectionCalculator' },
	{ monolithKey: 'stairsCalculator', targetKey: 'stairsCalculator' },
	{ monolithKey: 'waterPipeCalculator', targetKey: 'waterPipeCalculator' }
];

console.log('üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª—ã...');
const monolithData = JSON.parse(fs.readFileSync(monolithPath, 'utf8'));
const constructionData = JSON.parse(fs.readFileSync(constructionPath, 'utf8'));

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –º–æ–Ω–æ–ª–∏—Ç–µ: ${Object.keys(monolithData.calculators).length}`);

let migrated = 0;
let notFound = [];

constructionCalcs.forEach(({ monolithKey, targetKey }) => {
	if (monolithData.calculators[monolithKey]) {
		const calc = JSON.parse(JSON.stringify(monolithData.calculators[monolithKey]));
		
		// Ensure category is "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
		if (!calc.breadcrumbs) {
			calc.breadcrumbs = {};
		}
		calc.breadcrumbs.category = '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ';
		
		constructionData.calculators[targetKey] = calc;
		migrated++;
		console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω: ${monolithKey} -> ${targetKey}`);
	} else {
		notFound.push(`${monolithKey} (-> ${targetKey})`);
		console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–æ–ª–∏—Ç–µ: ${monolithKey}`);
	}
});

console.log(`\nüìù –°–æ—Ö—Ä–∞–Ω—è—é construction.json...`);
fs.writeFileSync(constructionPath, JSON.stringify(constructionData, null, '\t'), 'utf8');

console.log(`\n‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤: ${migrated}`);
if (notFound.length > 0) {
	console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFound.join(', ')}`);
}

// Validate JSON
try {
	JSON.parse(fs.readFileSync(constructionPath, 'utf8'));
	console.log('‚úÖ construction.json –≤–∞–ª–∏–¥–µ–Ω');
} catch (e) {
	console.error('‚ùå construction.json –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:', e.message);
	process.exit(1);
}

