const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function restoreOldStructure(locale) {
	console.log(`üîÑ Restoring old structure for ${locale}...`);

	const localeDir = path.join(__dirname, '..', 'messages', locale);
	const outputFile = path.join(__dirname, '..', 'messages', `${locale}.json`);

	if (!fs.existsSync(localeDir)) {
		console.error(`‚ùå Directory ${localeDir} not found`);
		return;
	}

	try {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º index.json
		const indexPath = path.join(localeDir, 'index.json');
		const indexData = JSON.parse(fs.readFileSync(indexPath, 'utf8'));

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
		const messages = {};

		for (const [key, filePath] of Object.entries(indexData)) {
			try {
				const filePathFull = path.join(localeDir, filePath);
				const content = JSON.parse(
					fs.readFileSync(filePathFull, 'utf8')
				);
				messages[key] = content;
				console.log(`  ‚úÖ Loaded ${filePath}`);
			} catch (error) {
				console.error(
					`  ‚ùå Failed to load ${filePath}:`,
					error.message
				);
			}
		}

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –≤ –æ–¥–Ω—É —Å–µ–∫—Ü–∏—é calculators
		const calculators = {};
		Object.keys(messages).forEach((category) => {
			if (category !== 'common' && messages[category]) {
				Object.keys(messages[category]).forEach((calcKey) => {
					calculators[calcKey] = messages[category][calcKey];
				});
			}
		});

		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
		const finalMessages = {
			...messages.common,
			calculators,
		};

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
		fs.writeFileSync(outputFile, JSON.stringify(finalMessages, null, 2));
		console.log(
			`‚úÖ Created ${locale}.json with ${
				Object.keys(calculators).length
			} calculators`
		);
	} catch (error) {
		console.error(`‚ùå Failed to restore ${locale}:`, error.message);
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
	console.log('üöÄ Restoring old translation structure...');

	const locales = ['ru', 'en', 'de', 'es'];

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
	locales.forEach(restoreOldStructure);

	console.log('üéâ Old structure restored!');
	console.log('\nüìÅ Structure:');
	console.log('messages/');
	locales.forEach((locale) => {
		console.log(`‚îú‚îÄ‚îÄ ${locale}.json (restored)`);
	});
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
	main();
}

module.exports = { restoreOldStructure };
