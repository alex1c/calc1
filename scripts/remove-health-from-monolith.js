const fs = require('fs');
const path = require('path');

const monolithPath = path.join(__dirname, '..', 'messages', 'ru.json');

// –ö–ª—é—á–∏ –≤ –º–æ–Ω–æ–ª–∏—Ç–µ
const healthCalculators = [
	'bmiHealth',
	'heartRate',
	'bloodPressure',
	'ovulation',
	'vitamins',
	'stress',
	'dose'
];

try {
	let monolithContent = JSON.parse(fs.readFileSync(monolithPath, 'utf8'));
	const initialCount = Object.keys(monolithContent.calculators || {}).length;

	console.log('üìñ –ß–∏—Ç–∞—é –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Ñ–∞–π–ª...');
	console.log(`üìä –í—Å–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: ${initialCount}`);

	let deletedCount = 0;
	for (const key of healthCalculators) {
		if (monolithContent.calculators && monolithContent.calculators[key]) {
			delete monolithContent.calculators[key];
			console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${key}`);
			deletedCount++;
		} else {
			console.log(`‚ö†Ô∏è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–æ–ª–∏—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω)`);
		}
	}

	fs.writeFileSync(monolithPath, JSON.stringify(monolithContent, null, 2), 'utf8');
	console.log('\nüìù –°–æ—Ö—Ä–∞–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...');

	const finalCount = Object.keys(monolithContent.calculators || {}).length;
	console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤: ${deletedCount}`);
	console.log(`üìä –í—Å–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${finalCount}`);

	// Final validation
	const isValid = (jsonString) => {
		try {
			JSON.parse(jsonString);
			return true;
		} catch (e) {
			return false;
		}
	};

	if (isValid(fs.readFileSync(monolithPath, 'utf8'))) {
		console.log('‚úÖ JSON —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω');
	} else {
		console.error('‚ùå –û—à–∏–±–∫–∞: JSON —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è!');
	}

	console.log('\n‚úÖ –í—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –ó–¥–æ—Ä–æ–≤—å–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞!');

} catch (error) {
	console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –ó–¥–æ—Ä–æ–≤—å–µ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞:', error);
}

