const fs = require('fs');
const path = require('path');

const monolithPath = path.join(__dirname, '..', 'messages', 'ru.json');
const lifePath = path.join(__dirname, '..', 'messages', 'ru', 'calculators', 'life.json');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –∏–∑ page.tsx
// –í –º–æ–Ω–æ–ª–∏—Ç–µ –∫–ª—é—á–∏: bmi, calories, foodRation, pregnancy, babyGrowth, bloodAlcohol, size-converter, ringSize, electricityCost, paper-weight, waterUsage, electricityUsage, gasUsage, heatingCost
// –í page.tsx –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å –¥–µ—Ñ–∏—Å–∞–º–∏: water-usage, electricity-usage, gas-usage, heating-cost
// –ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –∫–ª—é—á–∞–º–∏, –∫–∞–∫ –≤ page.tsx
const lifeCalcs = [
	{ monolithKey: 'bmi', targetKey: 'bmi' },
	{ monolithKey: 'calories', targetKey: 'calories' },
	{ monolithKey: 'foodRation', targetKey: 'foodRation' },
	{ monolithKey: 'pregnancy', targetKey: 'pregnancy' },
	{ monolithKey: 'babyGrowth', targetKey: 'babyGrowth' },
	{ monolithKey: 'bloodAlcohol', targetKey: 'bloodAlcohol' },
	{ monolithKey: 'size-converter', targetKey: 'size-converter' },
	{ monolithKey: 'ringSize', targetKey: 'ringSize' },
	{ monolithKey: 'electricityCost', targetKey: 'electricityCost' },
	{ monolithKey: 'paper-weight', targetKey: 'paper-weight' },
	{ monolithKey: 'waterUsage', targetKey: 'water-usage' },
	{ monolithKey: 'electricityUsage', targetKey: 'electricity-usage' },
	{ monolithKey: 'gasUsage', targetKey: 'gas-usage' },
	{ monolithKey: 'heatingCost', targetKey: 'heating-cost' }
];

console.log('üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª—ã...');
const monolithData = JSON.parse(fs.readFileSync(monolithPath, 'utf8'));
const lifeData = JSON.parse(fs.readFileSync(lifePath, 'utf8'));

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –º–æ–Ω–æ–ª–∏—Ç–µ: ${Object.keys(monolithData.calculators).length}`);

let migrated = 0;
let notFound = [];

lifeCalcs.forEach(({ monolithKey, targetKey }) => {
	if (monolithData.calculators[monolithKey]) {
		const calc = JSON.parse(JSON.stringify(monolithData.calculators[monolithKey]));
		
		// Ensure category is "–ñ–∏–∑–Ω—å"
		if (!calc.breadcrumbs) {
			calc.breadcrumbs = {};
		}
		calc.breadcrumbs.category = '–ñ–∏–∑–Ω—å';
		
		lifeData.calculators[targetKey] = calc;
		migrated++;
		console.log(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω: ${monolithKey} -> ${targetKey}`);
	} else {
		notFound.push(`${monolithKey} (-> ${targetKey})`);
		console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–Ω–æ–ª–∏—Ç–µ: ${monolithKey}`);
	}
});

console.log(`\nüìù –°–æ—Ö—Ä–∞–Ω—è—é life.json...`);
fs.writeFileSync(lifePath, JSON.stringify(lifeData, null, '\t'), 'utf8');

console.log(`\n‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤: ${migrated}`);
if (notFound.length > 0) {
	console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFound.join(', ')}`);
}

// Validate JSON
try {
	JSON.parse(fs.readFileSync(lifePath, 'utf8'));
	console.log('‚úÖ life.json –≤–∞–ª–∏–¥–µ–Ω');
} catch (e) {
	console.error('‚ùå life.json –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:', e.message);
	process.exit(1);
}

